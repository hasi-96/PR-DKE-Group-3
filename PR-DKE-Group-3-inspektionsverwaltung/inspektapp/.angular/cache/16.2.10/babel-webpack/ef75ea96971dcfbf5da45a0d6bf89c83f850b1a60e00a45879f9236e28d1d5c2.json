{"ast":null,"code":"import _asyncToGenerator from \"/Users/jakob/Documents/GitHub/PR-DKE-Group-3/PR-DKE-Group-3-inspektionsverwaltung/inspektapp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { firstValueFrom } from 'rxjs';\nexport let InvestitionenComponent = class InvestitionenComponent {\n  constructor(dbService, apiService) {\n    this.dbService = dbService;\n    this.apiService = apiService;\n    this.investition = {\n      massnahmeID: 0,\n      jahr: new Date().getFullYear(),\n      kosten: 0,\n      anmerkung: ''\n    };\n    this.isSynchronizing = false;\n  }\n  ngOnInit() {\n    window.addEventListener('online', () => this.synchronizeData());\n  }\n  onSubmit(form) {\n    if (form.valid) {\n      this.dbService.addInvestition(this.investition).then(investitionsID => {\n        console.log('Investition in IndexedDB gespeichert mit ID:', investitionsID);\n        if (navigator.onLine && !this.isSynchronizing) {\n          this.synchronizeData();\n        }\n        form.resetForm();\n        this.resetInvestition();\n      });\n    }\n  }\n  resetInvestition() {\n    this.investition = {\n      massnahmeID: 0,\n      jahr: new Date().getFullYear(),\n      kosten: 0,\n      anmerkung: ''\n    };\n  }\n  synchronizeData() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      if (_this.isSynchronizing || !navigator.onLine) {\n        return;\n      }\n      _this.isSynchronizing = true;\n      const investitionen = yield _this.dbService.getInvestitionen();\n      for (const investition of investitionen) {\n        yield firstValueFrom(_this.apiService.createInvestition(investition));\n        if (investition.investitionsID !== undefined) {\n          yield _this.dbService.deleteInvestition(investition.investitionsID);\n          console.log('Investition synchronisiert und aus IndexedDB gelöscht:', investition.investitionsID);\n        }\n      }\n      yield _this.dbService.clearAllData();\n      console.log('Alle Daten in der IndexedDB wurden gelöscht.');\n      _this.isSynchronizing = false;\n    })();\n  }\n};\nInvestitionenComponent = __decorate([Component({\n  selector: 'app-investitionen',\n  templateUrl: './investitionen.component.html',\n  styleUrls: ['./investitionen.component.css']\n})], InvestitionenComponent);","map":{"version":3,"names":["Component","firstValueFrom","InvestitionenComponent","constructor","dbService","apiService","investition","massnahmeID","jahr","Date","getFullYear","kosten","anmerkung","isSynchronizing","ngOnInit","window","addEventListener","synchronizeData","onSubmit","form","valid","addInvestition","then","investitionsID","console","log","navigator","onLine","resetForm","resetInvestition","_this","_asyncToGenerator","investitionen","getInvestitionen","createInvestition","undefined","deleteInvestition","clearAllData","__decorate","selector","templateUrl","styleUrls"],"sources":["/Users/jakob/Documents/GitHub/PR-DKE-Group-3/PR-DKE-Group-3-inspektionsverwaltung/inspektapp/src/app/inspektionen/inspektionen.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport {InvestitionenDbService} from \"../db/investitionDBService\";\nimport {InvestitionService} from \"../service/investition.service\";\nimport {Investition} from \"../investition\";\nimport { firstValueFrom } from 'rxjs';\n\n\n@Component({\n  selector: 'app-investitionen',\n  templateUrl: './investitionen.component.html',\n  styleUrls: ['./investitionen.component.css']\n})\nexport class InvestitionenComponent implements OnInit {\n  investition: Investition = {\n    massnahmeID: 0,\n    jahr: new Date().getFullYear(),\n    kosten: 0,\n    anmerkung: ''\n  };\n    private isSynchronizing = false;\n  constructor(\n    private dbService: InvestitionenDbService,\n    private apiService: InvestitionService\n  ) {}\n\n  ngOnInit() {\n    window.addEventListener('online', () => this.synchronizeData());\n  }\n\n  onSubmit(form: NgForm) {\n    if (form.valid) {\n      this.dbService.addInvestition(this.investition).then(investitionsID => {\n        console.log('Investition in IndexedDB gespeichert mit ID:', investitionsID);\n          if (navigator.onLine && !this.isSynchronizing){\n          this.synchronizeData();\n        }\n        form.resetForm();\n        this.resetInvestition();\n      });\n    }\n  }\n\n  private resetInvestition() {\n    this.investition = {\n      massnahmeID: 0,\n      jahr: new Date().getFullYear(),\n      kosten: 0,\n      anmerkung: ''\n    };\n  }\n\n    private async synchronizeData(): Promise<void> {\n        if (this.isSynchronizing || !navigator.onLine) {\n            return;\n        }\n        this.isSynchronizing = true;\n\n        const investitionen = await this.dbService.getInvestitionen();\n        for (const investition of investitionen) {\n            await firstValueFrom(this.apiService.createInvestition(investition));\n            if (investition.investitionsID !== undefined) {\n                await this.dbService.deleteInvestition(investition.investitionsID);\n                console.log('Investition synchronisiert und aus IndexedDB gelöscht:', investition.investitionsID);\n            }\n        }\n\n        await this.dbService.clearAllData();\n        console.log('Alle Daten in der IndexedDB wurden gelöscht.');\n\n        this.isSynchronizing = false;\n    }\n\n\n}\n"],"mappings":";;AAAA,SAASA,SAAS,QAAgB,eAAe;AAKjD,SAASC,cAAc,QAAQ,MAAM;AAQ9B,WAAMC,sBAAsB,GAA5B,MAAMA,sBAAsB;EAQjCC,YACUC,SAAiC,EACjCC,UAA8B;IAD9B,KAAAD,SAAS,GAATA,SAAS;IACT,KAAAC,UAAU,GAAVA,UAAU;IATpB,KAAAC,WAAW,GAAgB;MACzBC,WAAW,EAAE,CAAC;MACdC,IAAI,EAAE,IAAIC,IAAI,EAAE,CAACC,WAAW,EAAE;MAC9BC,MAAM,EAAE,CAAC;MACTC,SAAS,EAAE;KACZ;IACS,KAAAC,eAAe,GAAG,KAAK;EAI9B;EAEHC,QAAQA,CAAA;IACNC,MAAM,CAACC,gBAAgB,CAAC,QAAQ,EAAE,MAAM,IAAI,CAACC,eAAe,EAAE,CAAC;EACjE;EAEAC,QAAQA,CAACC,IAAY;IACnB,IAAIA,IAAI,CAACC,KAAK,EAAE;MACd,IAAI,CAAChB,SAAS,CAACiB,cAAc,CAAC,IAAI,CAACf,WAAW,CAAC,CAACgB,IAAI,CAACC,cAAc,IAAG;QACpEC,OAAO,CAACC,GAAG,CAAC,8CAA8C,EAAEF,cAAc,CAAC;QACzE,IAAIG,SAAS,CAACC,MAAM,IAAI,CAAC,IAAI,CAACd,eAAe,EAAC;UAC9C,IAAI,CAACI,eAAe,EAAE;;QAExBE,IAAI,CAACS,SAAS,EAAE;QAChB,IAAI,CAACC,gBAAgB,EAAE;MACzB,CAAC,CAAC;;EAEN;EAEQA,gBAAgBA,CAAA;IACtB,IAAI,CAACvB,WAAW,GAAG;MACjBC,WAAW,EAAE,CAAC;MACdC,IAAI,EAAE,IAAIC,IAAI,EAAE,CAACC,WAAW,EAAE;MAC9BC,MAAM,EAAE,CAAC;MACTC,SAAS,EAAE;KACZ;EACH;EAEgBK,eAAeA,CAAA;IAAA,IAAAa,KAAA;IAAA,OAAAC,iBAAA;MACzB,IAAID,KAAI,CAACjB,eAAe,IAAI,CAACa,SAAS,CAACC,MAAM,EAAE;QAC3C;;MAEJG,KAAI,CAACjB,eAAe,GAAG,IAAI;MAE3B,MAAMmB,aAAa,SAASF,KAAI,CAAC1B,SAAS,CAAC6B,gBAAgB,EAAE;MAC7D,KAAK,MAAM3B,WAAW,IAAI0B,aAAa,EAAE;QACrC,MAAM/B,cAAc,CAAC6B,KAAI,CAACzB,UAAU,CAAC6B,iBAAiB,CAAC5B,WAAW,CAAC,CAAC;QACpE,IAAIA,WAAW,CAACiB,cAAc,KAAKY,SAAS,EAAE;UAC1C,MAAML,KAAI,CAAC1B,SAAS,CAACgC,iBAAiB,CAAC9B,WAAW,CAACiB,cAAc,CAAC;UAClEC,OAAO,CAACC,GAAG,CAAC,wDAAwD,EAAEnB,WAAW,CAACiB,cAAc,CAAC;;;MAIzG,MAAMO,KAAI,CAAC1B,SAAS,CAACiC,YAAY,EAAE;MACnCb,OAAO,CAACC,GAAG,CAAC,8CAA8C,CAAC;MAE3DK,KAAI,CAACjB,eAAe,GAAG,KAAK;IAAC;EACjC;CAGH;AA7DYX,sBAAsB,GAAAoC,UAAA,EALlCtC,SAAS,CAAC;EACTuC,QAAQ,EAAE,mBAAmB;EAC7BC,WAAW,EAAE,gCAAgC;EAC7CC,SAAS,EAAE,CAAC,+BAA+B;CAC5C,CAAC,C,EACWvC,sBAAsB,CA6DlC"},"metadata":{},"sourceType":"module","externalDependencies":[]}